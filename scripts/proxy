#!/usr/bin/php
<?php
require_once __DIR__ . '/flags.php';

function fwriteall($handle, $data)
{
    $bytes_left = strlen($data);
    $length = strlen($data);

    while ($bytes_left > 0) {
        $written = fwrite($handle, substr($data, $length - $bytes_left));

        if ($written === FALSE) {
            return FALSE;
        }

        $bytes_left -= $written;
    }

    return TRUE;
}

flags::process($flags = flags::define(function ($flags) use (&$host, &$port, &$uri, &$use_tcp) {
    $flags->boolVar($use_tcp, 'tcp', 'whether to offer direct TCP', FALSE);
    $flags->stringVar($host, 'host', 'HTTP host you want to connect to');
    $flags->intVar($port, 'port', 'port on which server listens (default is 80)', 80);
    $flags->stringVar($uri, 'uri', 'URI through will which the communication will happen');
}));

if (empty($host) || empty($uri)) {
    echo $flags->generateUsage();
    die(1);
}

stream_set_blocking(STDIN, 0);

if (!($request_socket = @stream_socket_client("tcp://$host:$port"))) {
    die(1);
}

$request = "POST $uri HTTP/1.1\r\n" .
           "Host: $host\r\n" .
           "X-Connection: " . ($use_tcp ? ('tcp=' . gethostbyname($host) . ', ') : '') . "http\r\n" .
           "Content-Length: 0\r\n" .
           "Content-Type: application/octet-stream\r\n" .
           "Connection: close\r\n" .
           "\r\n";

if (fwriteall($request_socket, $request) === FALSE) {
    die(1);
}

$response = fgets($request_socket);
if ($response === FALSE) {
    die(1);
}

list($http, $code, $reason) = explode(' ', trim($response), 3);
$headers = array();

if (intval($code) !== 200) {
    die(1);
}

for (;;) {
    $line = fgets($request_socket);
    if ($line === FALSE) {
        die(1);
    }

    $line = trim($line);

    if (empty($line)) {
        break;
    }

    list($header, $content) = explode(':', $line, 2);
    $headers[strtolower($header)] = trim($content);
}

if (!isset($headers['x-connection'])) {
    die(1);
}

if (strncmp($headers['x-connection'], 'http=', 5) === 0) {
    $connection_type = 'http';
    $connection_id = substr($headers['x-connection'], 5);

} else if (strncmp($headers['x-connection'], 'tcp=', 4) === 0) {
    $connection_type = 'tcp';
    $connection_port = intval(substr($headers['x-connection'], 4));

} else {
    die(1);
}

switch ($connection_type) {
    case 'tcp':
        fclose($request_socket);

        if (!($socket = @stream_socket_client("tcp://" . gethostbyname($host) . ":$connection_port"))) {
            die(1);
        }

        stream_set_blocking($socket, 0);

        for (;;) {
            if (($n = stream_select($r = array(STDIN, $socket), $w = NULL, $e = NULL, 0x7fffffff)) === FALSE) {
                die(1);
            }

            if ($n < 1) {
                continue;
            }

            foreach ($r as $in) {
                if ($in === $socket) {
                    $out = STDOUT;
                } else {
                    $out = $socket;
                }

                while (($data = fread($in, 8192)) !== '') {
                    fwriteall($out, $data);
                }

                if (feof($in)) {
                    break 2;
                }
            }
        }
    break;

    case 'http':
        if (!(isset($headers['transfer-encoding']) && $headers['transfer-encoding'] === 'chunked')) {
            die(1);
        }

        for (;;) {
            if (stream_select($r = array(STDIN, $request_socket), $w = NULL, $e = NULL, 0x7fffffff) === FALSE) {
                die(1);
            }

            foreach ($r as $socket) {
                if ($socket === $request_socket) {
                    if (($chunksize = fgets($request_socket)) === FALSE) {
                        die(1);
                    }

                    $packetsize = intval($chunksize, 16);

                    if ($packetsize < 1) {
                        break 2;
                    }

                    if (($packet = fread($request_socket, $packetsize)) === FALSE || strlen($packet) !== $packetsize) {
                        die(1);
                    }

                    fgets($request_socket); // throw away new line

                    if ($packet[0] !== "\x00") { // not still alive packet
                        $packet = substr($packet, 1);

                        if (fwriteall(STDOUT, $packet) === FALSE) {
                            die(1);
                        }
                    }

                } else if ($socket === STDIN) {
                    $packet = '';
                    $packetsize = 0;
                    while (($packet .= fread(STDIN, 4096)) !== FALSE && !empty($packet) && strlen($packet) > $packetsize) {
                        $packetsize = strlen($packet);
                    }

                    if (!empty($packet)) {
                        $request = "POST $uri HTTP/1.1\r\n" .
                                   "Host: $host\r\n" .
                                   "X-Connection: http=$connection_id\r\n" .
                                   "Content-Length: " . strlen($packet) . "\r\n" .
                                   "Content-Type: application/octet-stream\r\n" .
                                   "Connection: close\r\n" .
                                   "\r\n" .
                                   "$packet";

                        if (!($write_socket = @stream_socket_client("tcp://$host:$port"))) {
                            die(1);
                        }

                        if (fwriteall($write_socket, $request) === FALSE) {
                            die(1);
                        }

                        if (($response = fgets($write_socket)) === FALSE) {
                            die(1);
                        }

                        list($http, $code, $reason) = explode(' ', $response, 3);

                        if (intval($code) !== 200) {
                            die(1);
                        }

                        fclose($write_socket);
                    }
                }

                if (feof($socket)) {
                    break 2;
                }
            }
        }

        fclose($request_socket);
    break;
}
